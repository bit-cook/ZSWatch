#include <dt-bindings/regulator/npm13xx.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

&pinctrl {
	pwm0_default: pwm0_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 23)>;
		};
	};

	pwm0_sleep: pwm0_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 23)>;
			low-power-enable;
		};
	};

	pwm1_default: pwm1_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 1, 5)>;
		};
	};

	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 1, 5)>;
			low-power-enable;
		};
	};

	pwm2_default: pwm2_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 1)>;
		};
	};

	pwm2_sleep: pwm2_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 1)>;
			low-power-enable;
		};
	};
	pdm0_default_alt: pdm0_default_alt {
		group1 {
			psels = <NRF_PSEL(PDM_CLK, 0, 19)>,
				<NRF_PSEL(PDM_DIN, 0, 25)>;
		};
	};
};

&uicr {
    nfct-pins-as-gpios;
};

&zephyr_udc0 {
	cdc_acm_uart0: cdc_acm_uart0 {
		compatible = "zephyr,cdc-acm-uart";
	};
};

&pwm2 {
    status = "okay";
    pinctrl-0 = <&pwm2_default>;
    pinctrl-1 = <&pwm2_sleep>;
    pinctrl-names = "default", "sleep";
};

/ {
	chosen {
		nordic,pm-ext-flash = &mx25u51245g;
		zephyr,console = &cdc_acm_uart0;
		zephyr,shell-uart = &cdc_acm_uart0;
		zephyr,uart-mcumgr = &cdc_acm_uart0;
	};

	aliases {
		spi-flash0 = &mx25u51245g;
		buzzer-pwm = &buzzer_pwm;
		rtc = &rv_8263_c8;
	};

    longpress: longpress {
        input = <&buttons>;
        compatible = "zephyr,input-longpress";
        input-codes = <INPUT_KEY_KP0>;
        short-codes = <INPUT_KEY_3>;
        long-codes = <INPUT_KEY_Y>;
        long-delay-ms = <10000>;
    };

	buttons: buttons {
        compatible = "gpio-keys";

        button1: button_1 {
            label = "top-right";
            gpios = <&gpio0 27 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
            zephyr,code = <INPUT_KEY_1>;
        };

        button2: button_2 {
            label = "bottom-left";
            gpios = <&gpio1 10 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
            zephyr,code = <INPUT_KEY_2>;
        };

        button3: button_3 {
            label = "bottom-right";
            gpios = <&gpio0 31 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
            zephyr,code = <INPUT_KEY_KP0>;
        };

        button4: button_4 {
            label = "top-left";
            gpios = <&gpio0 26 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
            zephyr,code = <INPUT_KEY_4>;
        };
    };

	vib_pwr: vib-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "vib-pwr-ctrl";
        enable-gpios = <&gpio1 15 GPIO_ACTIVE_HIGH>;
    };

	mic_pwr: mic-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "mic-pwr-ctrl";
        enable-gpios = <&gpio1 6 GPIO_ACTIVE_LOW>;
    };

	buzzer_pwr: buzzer-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "buzzer-pwr-ctrl";
        enable-gpios = <&gpio0 1 0>;
    };

	pwmleds {
        compatible = "pwm-leds";

		buzzer_pwm: pwm_led_2 {
            pwms = <&pwm2 0 PWM_HZ(880) PWM_POLARITY_NORMAL>;
        };
    };
};

dmic_dev: &pdm0 {
	status = "okay";
	pinctrl-0 = <&pdm0_default_alt>;
	pinctrl-names = "default";
	clock-source = "PCLK32M";
};

&uart0 {
    status = "disabled";
};

&i2c1 {
	rv_8263_c8: rv-8263-c8@51 {
		compatible = "microcrystal,rv-8263-c8";
		reg = <0x51>;
		status = "okay";
		clkout = <0>;
		int-gpios = <&gpio1 13 (GPIO_PULL_UP)>;
	};

	bmi270: bmi270@68 {
		compatible = "bosch,bmi270-plus";
		reg = <0x68>;
		status = "okay";
		int-gpios = <&gpio1 4 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;
		// NOTE: The swap is performed AFTER the axis inversion. So we have to invert the y axis of the sensor
		// to get the x axis of the watch coordinate system.
		swap-xy;
		invert-y;
	};

	npm1300_pmic: pmic@6b {
		compatible = "nordic,npm1300";
		reg = <0x6b>;
		host-int-gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
		pmic-int-pin	= <4>;

		npm1300_gpio: gpio-controller {
			compatible = "nordic,npm1300-gpio";
			gpio-controller;
			#gpio-cells = <2>;
			ngpios = <5>;
		};

		npm1300_regulators: regulators {
			compatible = "nordic,npm1300-regulator";

			npm1300_buck1: BUCK1 {
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-boot-on;
				regulator-always-on;
			};

			regulator_buzzer: BUCK2 {
				regulator-min-microvolt = <3000000>;
				regulator-max-microvolt = <3000000>;
				regulator-init-microvolt = <3000000>;
			};

			regulator_3v3: LDO1 {
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-initial-mode = <NPM13XX_LDSW_MODE_LDO>;
				regulator-boot-on;
			};

			// LDO2 is not used
			npm1300_ldo2: LDO2 {
				status = "disabled";
			};
		};

		npm1300_charger: charger {
			compatible = "nordic,npm1300-charger";
			term-microvolt = <4400000>;
			term-warm-microvolt = <4000000>;
			current-microamp = <200000>; // 0.2C CC (constant current) charge to 4.4V,
			term-current-percent = <10>; // then 4.4V CV(constant voltage) charge till charge current decline to â‰¤ 0.02C
			dischg-limit-microamp = <1000000>;
			vbus-limit-microamp = <500000>;
			thermistor-ohms = <0>; // Don't use thermistor
			thermistor-beta = <0>; // Not used
			charging-enable;
		};

		npm1300_buttons: buttons {
			compatible = "gpio-keys";
			status = "disabled";
		};
	};
};

&qspi {
	status = "okay";
	pinctrl-0 = <&qspi_default>;
	pinctrl-1 = <&qspi_sleep>;
	pinctrl-names = "default", "sleep";

	mx25u51245g: mx25u51245g@0 {
		compatible = "nordic,qspi-nor";
		reg = <0>;
		sck-frequency = <96000000>;
		jedec-id = [c2 25 3a];
		size = <DT_SIZE_M(64*8)>;
		/*
		has-dpd;
        // CS High to Power-Down Mode (tDP) - 3 us
        // Rev. S Table 26. AC Electrical Characteristic
		t-enter-dpd = <20000>;
        // CS High to Standby Mode without Electronic Signature Read (tRES1) 3 us
        // Rev. S Table 26. AC Electrical Characteristic
		t-exit-dpd = <20000>;
		*/
		// Configure to actully use Quad SPI data.
		writeoc = "pp4io";
		readoc = "read4io";
		quad-enable-requirements = "S1B6";
	};
};

/delete-node/ &storage_partition;

&mx25u51245g {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;
		
		// For Nordic Partition manager to work it has to have this name.
		littlefs_storage: partition@320000 {
			label = "littlefs_storage";
			reg = <0x320000 0x200000>;
		};

		lvgl_raw_partition: partition@520000 {
			label = "lvgl_raw_partition";
			reg = <0x520000 0x800000>;
		};

		storage_partition: partition@D20000 {
			label = "storage_partition";
			reg = <0xD20000 0x100000 >;
		};
	};
};
