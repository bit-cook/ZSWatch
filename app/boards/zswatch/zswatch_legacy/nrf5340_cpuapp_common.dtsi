/*
* Copyright (c) 2023 Jakob Krantz
*
* SPDX-License-Identifier: Apache-2.0
*/
#include "nrf5340_cpuapp_common-pinctrl.dtsi"
#include <nordic/nrf5340_cpuapp_partition.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

/ {
    chosen {
        zephyr,console = &uart0;
        zephyr,shell-uart = &uart0;
        zephyr,uart-mcumgr = &uart0;
        zephyr,bt-mon-uart = &uart0;
        zephyr,bt-c2h-uart = &uart0;
        zephyr,bt-hci = &bt_hci_ipc0;
        zephyr,ieee802154 = &ieee802154;
        zephyr,display = &gc9a01;
    };

	pwmleds {
        compatible = "pwm-leds";

        display_blk: pwm_led_0 {
            pwms = <&pwm0 0 PWM_USEC(15) PWM_POLARITY_INVERTED>;
        };

        vibrator_pwm: pwm_led_1 {
            pwms = <&pwm1 0 PWM_MSEC(20) 0>;
        };
    };

    lvgl_pointer_input: lvgl_pointer {
        compatible = "zephyr,lvgl-pointer-input";
        input = <&cst816s>;
        swap-xy;
        invert-x;
    };


    aliases {
        display-blk = &display_blk;
        vibrator-pwm = &vibrator_pwm;
        sw1 = &button1;
        sw2 = &button2;
        sw3 = &button3;
        sw4 = &button4;
        watchdog0 = &wdt0;
        mcuboot-button0 = &button1;
    };
};

&vregmain {
    regulator-initial-mode = <NRF5X_REG_MODE_DCDC>;
};

&vregradio {
    regulator-initial-mode = <NRF5X_REG_MODE_DCDC>;
};

&vregh {
    status = "okay";
};

&lfxo {
    status = "disabled";
};

&pwm0 {
    status = "okay";
    pinctrl-0 = <&pwm0_default>;
    pinctrl-1 = <&pwm0_sleep>;
    pinctrl-names = "default", "sleep";
};

&pwm1 {
    status = "okay";
    pinctrl-0 = <&pwm1_default>;
    pinctrl-1 = <&pwm1_sleep>;
    pinctrl-names = "default", "sleep";
};

&adc {
    status = "okay";
};

&gpiote {
    status = "okay";
};

&gpio0 {
    status = "okay";
    sense-edge-mask = <0xffffffff>;
};

&gpio1 {
    status = "okay";
};

&i2c1 {
    compatible = "nordic,nrf-twim";
    status = "okay";
    clock-frequency = <I2C_BITRATE_FAST>;
    zephyr,concat-buf-size = <512>;

    pinctrl-0 = <&i2c1_default>;
    pinctrl-1 = <&i2c1_sleep>;
    pinctrl-names = "default", "sleep";
    
    bme688: bme688@76 {
        compatible = "bosch,bme680";
        reg = <0x76>;
        status = "okay";
    };

    lis2mdl: lis2mdl@1e {
        compatible = "st,lis2mdl";
        reg = <0x1e>;
        status = "okay";
        irq-gpios = <&gpio0 24 0>;
        cancel-offset;
    };

    bmp581: bmp581@47 {
        compatible = "bosch,zsw_bmp581";
        reg = <0x47>;
        status = "okay";
        int-gpios = <&gpio0 25 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
    };

    bmi270: bmi270@68 {
        compatible = "bosch,bmi270-plus";
        reg = <0x68>;
        status = "okay";
        int-gpios = <&gpio0 19 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;
        // NOTE: The swap is performed AFTER the axis inversion. So we have to invert the y axis of the sensor
        // to get the x axis of the watch coordinate system.
        swap-xy;
        invert-y;
    };

    apds9306: apds9306@52 {
        compatible = "avago,apds9306";
        reg = <0x52>;
        status = "okay";
    };
};

&i2c2 {
    compatible = "nordic,nrf-twim";
    status = "okay";
    clock-frequency = <I2C_BITRATE_FAST>;

    pinctrl-0 = <&i2c2_default>;
    pinctrl-1 = <&i2c2_sleep>;
    pinctrl-names = "default", "sleep";

    cst816s: cst816s@15 {
        compatible = "hynitron,cst816s";
        reg = <0x15>;
        status = "okay";
        irq-gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
        rst-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
    };
};

&spi4  {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi4_default>;
    pinctrl-1 = <&spi4_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 12 GPIO_ACTIVE_LOW>;

    gc9a01: gc9a01@0 {
        compatible = "buydisplay,gc9a01";
        status = "okay";
        spi-max-frequency = <30000000>;
        reg = <0>;
        width = <240>;
        height = <240>;
        bl-gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
        reset-gpios = <&gpio0 3 GPIO_ACTIVE_HIGH>;
        dc-gpios = <&gpio0 11 GPIO_ACTIVE_HIGH>;
    };
};

/* UART0 GPIOs can be configured for other use-cases */
&uart0 {
    current-speed = <115200>;
    status = "okay";
    pinctrl-0 = <&uart0_default>;
    pinctrl-1 = <&uart0_sleep>;
    pinctrl-names = "default", "sleep";
};

&timer0 {
    status = "okay";
};

&timer1 {
    status = "okay";
};

&timer2 {
    status = "okay";
};


/ {
	fstab {
		compatible = "zephyr,fstab";

		lvgl_lfs: lvgl_lfs {
			compatible = "zephyr,fstab,littlefs";
			mount-point = "/lvgl_lfs";
			partition = <&littlefs_storage>;
			automount;
			read-size = <512>;
			prog-size = <512>;
			cache-size = <512>;
			lookahead-size = <4096>;
			block-cycles = <512>;
		};
	};
};

zephyr_udc0: &usbd {
    compatible = "nordic,nrf-usbd";
    status = "okay";
};

/ {
    reserved-memory {
        #address-cells = <1>;
        #size-cells = <1>;
        ranges;

        sram0_image: image@20000000 {
            /* Zephyr image(s) memory */
        };

        sram0_s: image_s@20000000 {
            /* Secure image memory */
        };

        sram0_ns: image_ns@20040000 {
            /* Non-Secure image memory */
        };
    };
};

/ {
    sram@2006E000 {
        compatible = "zephyr,memory-region", "mmio-sram";
        reg = <0x2006E000 0x2000>;
        zephyr,memory-region = "RetainedMem";
        status = "okay";

        retainedmem {
            compatible = "zephyr,retained-ram";
            status = "okay";
            #address-cells = <1>;
            #size-cells = <1>;

            retention_coredump: retention@0 {
                compatible = "zephyr,retention";
                status = "okay";
                reg = <0x0 0x1F00>;
                prefix = [04 fa];
                checksum = <1>;
            };

            retention0: retention@1F00 {
                compatible = "zephyr,retention";
                status = "okay";
                reg = <0x1F00 0xFB>;
                prefix = [04 fa];
                checksum = <1>;
            };
            // Last byte in RAM is for boot mode.
            // Du to debugger only supports writing 4 bytes at a time
            // we need to leave a 3 byte gap between the two retention areas.
            retention1: retention@1FFF {
                compatible = "zephyr,retention";
                status = "okay";
                reg = <0x1FFF 0x1>;
            };
        };
    };

    chosen {
            zephyr,boot-mode = &retention1;
    };
};


/*
* Reduce SRAM0 usage by 256 bytes to account for non-init area.
* The last 256 bytes of SRAM0 are used for retention memory.
*/
&sram0 {
    //reg = <0x20000000 0x7DFFF>;
};
